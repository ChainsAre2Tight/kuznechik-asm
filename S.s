SBox:
	.ascii "\xfc\xee\xdd\x11\xcf\x6e\x31\x16\xfb\xc4\xfa\xda\x23\xc5\x04\x4d"
    .ascii "\xe9\x77\xf0\xdb\x93\x2e\x99\xba\x17\x36\xf1\xbb\x14\xcd\x5f\xc1"
    .ascii "\xf9\x18\x65\x5a\xe2\x5c\xef\x21\x81\x1c\x3c\x42\x8b\x01\x8e\x4f"
    .ascii "\x05\x84\x02\xae\xe3\x6a\x8f\xa0\x06\x0b\xed\x98\x7f\xd4\xd3\x1f"
    .ascii "\xeb\x34\x2c\x51\xea\xc8\x48\xab\xf2\x2a\x68\xa2\xfd\x3a\xce\xcc"
    .ascii "\xb5\x70\x0e\x56\x08\x0c\x76\x12\xbf\x72\x13\x47\x9c\xb7\x5d\x87"
    .ascii "\x15\xa1\x96\x29\x10\x7b\x9a\xc7\xf3\x91\x78\x6f\x9d\x9e\xb2\xb1"
    .ascii "\x32\x75\x19\x3d\xff\x35\x8a\x7e\x6d\x54\xc6\x80\xc3\xbd\x0d\x57"
    .ascii "\xdf\xf5\x24\xa9\x3e\xa8\x43\xc9\xd7\x79\xd6\xf6\x7c\x22\xb9\x03"
    .ascii "\xe0\x0f\xec\xde\x7a\x94\xb0\xbc\xdc\xe8\x28\x50\x4e\x33\x0a\x4a"
    .ascii "\xa7\x97\x60\x73\x1e\x00\x62\x44\x1a\xb8\x38\x82\x64\x9f\x26\x41"
    .ascii "\xad\x45\x46\x92\x27\x5e\x55\x2f\x8c\xa3\xa5\x7d\x69\xd5\x95\x3b"
    .ascii "\x07\x58\xb3\x40\x86\xac\x1d\xf7\x30\x37\x6b\xe4\x88\xd9\xe7\x89"
    .ascii "\xe1\x1b\x83\x49\x4c\x3f\xf8\xfe\x8d\x53\xaa\x90\xca\xd8\x85\x61"
    .ascii "\x20\x71\x67\xa4\x2d\x2b\x09\x5b\xcb\x9b\x25\xd0\xbe\xe5\x6c\x52"
    .ascii "\x59\xa6\x74\xd2\xe6\xf4\xb4\xc0\xd1\x66\xaf\xc2\x39\x4b\x63\xb6"

.globl transform_S
.type transform_S @function
transform_S:
    pushq %rdi                  # remember pointer to block
    pushq %rsi
    leaq SBox(%rip), %rsi       # TODO: save in callee reserved register
    leaq 16(%rdi), %rcx         # calculate last memory position in array

substitute_loop:
    movzxb (%rdi), %rax         # get 1 byte from array (offset) and widen it to full register
    movb (%rsi, %rax, 1), %al   # store substituted value in accumulator
    movb %al, (%rdi)            # store substituted value in array
    addq $1, %rdi               # move pointer
    cmpq %rcx, %rdi
    jl substitute_loop

    popq %rsi
    popq %rdi                   # restore pointer to block for convenience
    ret
