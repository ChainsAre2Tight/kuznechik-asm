.align 16
RoundConstants: # 32x16 bytes
    .ascii "\x6e\xa2\x76\x72\x6c\x48\x7a\xb8\x5d\x27\xbd\x10\xdd\x84\x94\x01" # C1
    .ascii "\xdc\x87\xec\xe4\xd8\x90\xf4\xb3\xba\x4e\xb9\x20\x79\xcb\xeb\x02" # C2
    .ascii "\xb2\x25\x9a\x96\xb4\xd8\x8e\x0b\xe7\x69\x04\x30\xa4\x4f\x7f\x03" # C3
    .ascii "\x7b\xcd\x1b\x0b\x73\xe3\x2b\xa5\xb7\x9c\xb1\x40\xf2\x55\x15\x04" # C4
    .ascii "\x15\x6f\x6d\x79\x1f\xab\x51\x1d\xea\xbb\x0c\x50\x2f\xd1\x81\x05" # C5
    .ascii "\xa7\x4a\xf7\xef\xab\x73\xdf\x16\x0d\xd2\x08\x60\x8b\x9e\xfe\x06" # C6
    .ascii "\xc9\xe8\x81\x9d\xc7\x3b\xa5\xae\x50\xf5\xb5\x70\x56\x1a\x6a\x07" # C7
    .ascii "\xf6\x59\x36\x16\xe6\x05\x56\x89\xad\xfb\xa1\x80\x27\xaa\x2a\x08" # C8
    .ascii "\x98\xfb\x40\x64\x8a\x4d\x2c\x31\xf0\xdc\x1c\x90\xfa\x2e\xbe\x09" # C9
    .ascii "\x2a\xde\xda\xf2\x3e\x95\xa2\x3a\x17\xb5\x18\xa0\x5e\x61\xc1\x0a" # C10
    .ascii "\x44\x7c\xac\x80\x52\xdd\xd8\x82\x4a\x92\xa5\xb0\x83\xe5\x55\x0b" # C11
    .ascii "\x8d\x94\x2d\x1d\x95\xe6\x7d\x2c\x1a\x67\x10\xc0\xd5\xff\x3f\x0c" # C12
    .ascii "\xe3\x36\x5b\x6f\xf9\xae\x07\x94\x47\x40\xad\xd0\x08\x7b\xab\x0d" # C13
    .ascii "\x51\x13\xc1\xf9\x4d\x76\x89\x9f\xa0\x29\xa9\xe0\xac\x34\xd4\x0e" # C14
    .ascii "\x3f\xb1\xb7\x8b\x21\x3e\xf3\x27\xfd\x0e\x14\xf0\x71\xb0\x40\x0f" # C15
    .ascii "\x2f\xb2\x6c\x2c\x0f\x0a\xac\xd1\x99\x35\x81\xc3\x4e\x97\x54\x10" # C16
    .ascii "\x41\x10\x1a\x5e\x63\x42\xd6\x69\xc4\x12\x3c\xd3\x93\x13\xc0\x11" # C17
    .ascii "\xf3\x35\x80\xc8\xd7\x9a\x58\x62\x23\x7b\x38\xe3\x37\x5c\xbf\x12" # C18
    .ascii "\x9d\x97\xf6\xba\xbb\xd2\x22\xda\x7e\x5c\x85\xf3\xea\xd8\x2b\x13" # C19
    .ascii "\x54\x7f\x77\x27\x7c\xe9\x87\x74\x2e\xa9\x30\x83\xbc\xc2\x41\x14" # C20
    .ascii "\x3a\xdd\x01\x55\x10\xa1\xfd\xcc\x73\x8e\x8d\x93\x61\x46\xd5\x15" # C21
    .ascii "\x88\xf8\x9b\xc3\xa4\x79\x73\xc7\x94\xe7\x89\xa3\xc5\x09\xaa\x16" # C22
    .ascii "\xe6\x5a\xed\xb1\xc8\x31\x09\x7f\xc9\xc0\x34\xb3\x18\x8d\x3e\x17" # C23
    .ascii "\xd9\xeb\x5a\x3a\xe9\x0f\xfa\x58\x34\xce\x20\x43\x69\x3d\x7e\x18" # C24
    .ascii "\xb7\x49\x2c\x48\x85\x47\x80\xe0\x69\xe9\x9d\x53\xb4\xb9\xea\x19" # C25
    .ascii "\x05\x6c\xb6\xde\x31\x9f\x0e\xeb\x8e\x80\x99\x63\x10\xf6\x95\x1a" # C26
    .ascii "\x6b\xce\xc0\xac\x5d\xd7\x74\x53\xd3\xa7\x24\x73\xcd\x72\x01\x1b" # C27
    .ascii "\xa2\x26\x41\x31\x9a\xec\xd1\xfd\x83\x52\x91\x03\x9b\x68\x6b\x1c" # C28
    .ascii "\xcc\x84\x37\x43\xf6\xa4\xab\x45\xde\x75\x2c\x13\x46\xec\xff\x1d" # C29
    .ascii "\x7e\xa1\xad\xd5\x42\x7c\x25\x4e\x39\x1c\x28\x23\xe2\xa3\x80\x1e" # C30
    .ascii "\x10\x03\xdb\xa7\x2e\x34\x5f\xf6\x64\x3b\x95\x33\x3f\x27\x14\x1f" # C31
    .ascii "\x5e\xa7\xd8\x58\x1e\x14\x9b\x61\xf1\x6a\xc1\x45\x9c\xed\xa8\x20" # C32


.text
.globl keyschedule
.type keyschedule @function
keyschedule:
    # %rdi - pointer to key, 32 bytes
    # %rsi - pointer to target, 10x16 bytes
    # %r12 - pointer to constant array

    push %rdi
    push %rsi
    push %r12
    push %r13
    push %r14
    push %r15

    # move pointer to target to non-volatile register, r15
    movq %rsi, %r15
    
    # first round key are the first 16 bytes of master key
    movapd (%rdi), %xmm0
    movapd %xmm0, (%r15)

    # second round key are the last 16 bytes of master key
    movapd 16(%rdi), %xmm0
    movapd %xmm0, 16(%r15)

    # set pointer to new keypair
    addq $32, %r15

    # set pointer to constants array (32x16 bytes)
    leaq RoundConstants(%rip), %r12

    # for each remaining pair of round keys,
    # move previous pair over,
    # and perform F transform on the new pair 8 times,
    # using constant from constants array as key
    # and moving that pointer up each time

    # r13 - pair counter
    # r14 - F counter

    movq $4, %r13
keyschedule_pair_loop:
    movq %r15, %rdi 
    movq %r15, %rsi
    addq $16, %rsi

    movapd -32(%r15), %xmm0
    movapd %xmm0, (%rdi)
    movapd -16(%r15), %xmm0
    movapd %xmm0, (%rsi)

    movq $8, %r14
keyschedule_pair_feistel_loop:
    movq %r12, %rdx
    call transform_F
    addq $16, %r12
    subq $1, %r14
    jnz keyschedule_pair_feistel_loop

    addq $32, %r15
    subq $1, %r13
    jnz keyschedule_pair_loop

    pop %r15
    pop %r14
    pop %r13
    pop %r12
    pop %rsi
    pop %rdi
    ret
